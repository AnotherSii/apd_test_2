import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, g as goto, a as space, e as element, t as text, q as query_selector_all, b as detach_dev, c as claim_space, f as claim_element, h as children, j as claim_text, l as add_location, k as attr_dev, m as insert_dev, n as append_dev, o as set_input_value, p as listen_dev, r as prevent_default, x as set_data_dev, y as to_number, u as noop, w as run_all } from './client.21b56940.js';

/* src/routes/users/[user].svelte generated by Svelte v3.31.0 */
const file = "src/routes/users/[user].svelte";

function create_fragment(ctx) {
	let title_value;
	let t0;
	let h1;
	let t1_value = "Hello " + /*user*/ ctx[1] + "!" + "";
	let t1;
	let t2;
	let h2;
	let t3;
	let t4;
	let t5;
	let form;
	let h3;
	let t6;
	let t7;
	let label0;
	let t8;
	let t9;
	let input0;
	let t10;
	let label1;
	let t11;
	let t12;
	let input1;
	let t13;
	let div;
	let input2;
	let t14;
	let button;
	let t15;
	let mounted;
	let dispose;
	document.title = title_value = /*user*/ ctx[1] + "'s Tokens";

	const block = {
		c: function create() {
			t0 = space();
			h1 = element("h1");
			t1 = text(t1_value);
			t2 = space();
			h2 = element("h2");
			t3 = text("Token Balance: ");
			t4 = text(/*value*/ ctx[0]);
			t5 = space();
			form = element("form");
			h3 = element("h3");
			t6 = text("Make a transfer");
			t7 = space();
			label0 = element("label");
			t8 = text("To");
			t9 = space();
			input0 = element("input");
			t10 = space();
			label1 = element("label");
			t11 = text("Token Amount");
			t12 = space();
			input1 = element("input");
			t13 = space();
			div = element("div");
			input2 = element("input");
			t14 = space();
			button = element("button");
			t15 = text("sign out");
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-1l5cnkr\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			h1 = claim_element(nodes, "H1", {});
			var h1_nodes = children(h1);
			t1 = claim_text(h1_nodes, t1_value);
			h1_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			h2 = claim_element(nodes, "H2", {});
			var h2_nodes = children(h2);
			t3 = claim_text(h2_nodes, "Token Balance: ");
			t4 = claim_text(h2_nodes, /*value*/ ctx[0]);
			h2_nodes.forEach(detach_dev);
			t5 = claim_space(nodes);
			form = claim_element(nodes, "FORM", { class: true });
			var form_nodes = children(form);
			h3 = claim_element(form_nodes, "H3", {});
			var h3_nodes = children(h3);
			t6 = claim_text(h3_nodes, "Make a transfer");
			h3_nodes.forEach(detach_dev);
			t7 = claim_space(form_nodes);
			label0 = claim_element(form_nodes, "LABEL", { for: true });
			var label0_nodes = children(label0);
			t8 = claim_text(label0_nodes, "To");
			label0_nodes.forEach(detach_dev);
			t9 = claim_space(form_nodes);

			input0 = claim_element(form_nodes, "INPUT", {
				type: true,
				name: true,
				required: true,
				class: true
			});

			t10 = claim_space(form_nodes);
			label1 = claim_element(form_nodes, "LABEL", { for: true });
			var label1_nodes = children(label1);
			t11 = claim_text(label1_nodes, "Token Amount");
			label1_nodes.forEach(detach_dev);
			t12 = claim_space(form_nodes);

			input1 = claim_element(form_nodes, "INPUT", {
				type: true,
				name: true,
				required: true,
				class: true
			});

			t13 = claim_space(form_nodes);
			div = claim_element(form_nodes, "DIV", { class: true });
			var div_nodes = children(div);
			input2 = claim_element(div_nodes, "INPUT", { class: true, type: true, value: true });
			t14 = claim_space(div_nodes);
			button = claim_element(div_nodes, "BUTTON", { class: true });
			var button_nodes = children(button);
			t15 = claim_text(button_nodes, "sign out");
			button_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			form_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(h1, file, 103, 0, 2377);
			add_location(h2, file, 104, 0, 2410);
			add_location(h3, file, 107, 3, 2489);
			attr_dev(label0, "for", "to");
			add_location(label0, file, 108, 3, 2517);
			attr_dev(input0, "type", "text");
			attr_dev(input0, "name", "to");
			input0.required = "true";
			attr_dev(input0, "class", "svelte-1vebrj9");
			add_location(input0, file, 109, 3, 2547);
			attr_dev(label1, "for", "amount");
			add_location(label1, file, 110, 3, 2619);
			attr_dev(input1, "type", "number");
			attr_dev(input1, "name", "amount");
			input1.required = "true";
			attr_dev(input1, "class", "svelte-1vebrj9");
			add_location(input1, file, 111, 3, 2663);
			attr_dev(input2, "class", "button svelte-1vebrj9");
			attr_dev(input2, "type", "submit");
			input2.value = "send";
			add_location(input2, file, 113, 8, 2769);
			attr_dev(button, "class", "button");
			add_location(button, file, 114, 8, 2828);
			attr_dev(div, "class", "buttons svelte-1vebrj9");
			add_location(div, file, 112, 3, 2739);
			attr_dev(form, "class", "svelte-1vebrj9");
			add_location(form, file, 106, 0, 2443);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, h1, anchor);
			append_dev(h1, t1);
			insert_dev(target, t2, anchor);
			insert_dev(target, h2, anchor);
			append_dev(h2, t3);
			append_dev(h2, t4);
			insert_dev(target, t5, anchor);
			insert_dev(target, form, anchor);
			append_dev(form, h3);
			append_dev(h3, t6);
			append_dev(form, t7);
			append_dev(form, label0);
			append_dev(label0, t8);
			append_dev(form, t9);
			append_dev(form, input0);
			set_input_value(input0, /*receiver*/ ctx[2]);
			append_dev(form, t10);
			append_dev(form, label1);
			append_dev(label1, t11);
			append_dev(form, t12);
			append_dev(form, input1);
			set_input_value(input1, /*amount*/ ctx[3]);
			append_dev(form, t13);
			append_dev(form, div);
			append_dev(div, input2);
			append_dev(div, t14);
			append_dev(div, button);
			append_dev(button, t15);

			if (!mounted) {
				dispose = [
					listen_dev(input0, "input", /*input0_input_handler*/ ctx[5]),
					listen_dev(input1, "input", /*input1_input_handler*/ ctx[6]),
					listen_dev(button, "click", logout, false, false, false),
					listen_dev(form, "submit", prevent_default(/*transfer*/ ctx[4]), false, true, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*user*/ 2 && title_value !== (title_value = /*user*/ ctx[1] + "'s Tokens")) {
				document.title = title_value;
			}

			if (dirty & /*user*/ 2 && t1_value !== (t1_value = "Hello " + /*user*/ ctx[1] + "!" + "")) set_data_dev(t1, t1_value);
			if (dirty & /*value*/ 1) set_data_dev(t4, /*value*/ ctx[0]);

			if (dirty & /*receiver*/ 4 && input0.value !== /*receiver*/ ctx[2]) {
				set_input_value(input0, /*receiver*/ ctx[2]);
			}

			if (dirty & /*amount*/ 8 && to_number(input1.value) !== /*amount*/ ctx[3]) {
				set_input_value(input1, /*amount*/ ctx[3]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(h2);
			if (detaching) detach_dev(t5);
			if (detaching) detach_dev(form);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

async function preload({ params, query }) {
	const res = await this.fetch(`http://localhost:3737/contracts/apd_v01/State?key=${params.user}`); // this should be the masternode
	const data = await res.json();
	if (data.value === "undefined") this.error(res.status, data.message);
	if (data.value === null) data.value = 0;
	return { value: data.value, user: params.user };
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("U5Buseru5D", slots, []);
	let { user } = $$props;
	let { value } = $$props;
	let receiver = "";
	let amount = 0;

	const transfer = async () => {
		const transaction = {
			sender: user,
			contract: "apd_v01",
			method: "transfer",
			args: { receiver, amount }
		};

		const refreshBalance = async () => {
			const res = await fetch("http://localhost:3737/contracts/apd_v01/State?key=" + user);
			let data = await res.json();
			$$invalidate(0, value = data.value);
		};

		const clearInputs = () => {
			$$invalidate(2, receiver = "");
			$$invalidate(3, amount = 0);
		};

		const options = {
			method: "POST",
			headers: { "Content-Type": "application/json" },
			body: JSON.stringify(transaction)
		};

		const res = await fetch(`http://localhost:3737/`, options);
		const data = await res.json();

		if (data.error) {
			alert(data.error);
		} else {
			alert("You sent " + amount + " token(s) to " + receiver + "!");
			clearInputs();
			refreshBalance();
		}
	};

	const writable_props = ["user", "value"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<U5Buseru5D> was created with unknown prop '${key}'`);
	});

	function input0_input_handler() {
		receiver = this.value;
		$$invalidate(2, receiver);
	}

	function input1_input_handler() {
		amount = to_number(this.value);
		$$invalidate(3, amount);
	}

	$$self.$$set = $$props => {
		if ("user" in $$props) $$invalidate(1, user = $$props.user);
		if ("value" in $$props) $$invalidate(0, value = $$props.value);
	};

	$$self.$capture_state = () => ({
		preload,
		goto,
		user,
		value,
		receiver,
		amount,
		transfer
	});

	$$self.$inject_state = $$props => {
		if ("user" in $$props) $$invalidate(1, user = $$props.user);
		if ("value" in $$props) $$invalidate(0, value = $$props.value);
		if ("receiver" in $$props) $$invalidate(2, receiver = $$props.receiver);
		if ("amount" in $$props) $$invalidate(3, amount = $$props.amount);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		value,
		user,
		receiver,
		amount,
		transfer,
		input0_input_handler,
		input1_input_handler
	];
}

class U5Buseru5D extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { user: 1, value: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "U5Buseru5D",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*user*/ ctx[1] === undefined && !("user" in props)) {
			console.warn("<U5Buseru5D> was created without expected prop 'user'");
		}

		if (/*value*/ ctx[0] === undefined && !("value" in props)) {
			console.warn("<U5Buseru5D> was created without expected prop 'value'");
		}
	}

	get user() {
		throw new Error("<U5Buseru5D>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set user(value) {
		throw new Error("<U5Buseru5D>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value() {
		throw new Error("<U5Buseru5D>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<U5Buseru5D>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default U5Buseru5D;
export { preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiW3VzZXJdLmFlOGIwMzg1LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcm91dGVzL3VzZXJzL1t1c2VyXS5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPCEtLSBmcm9udGVuZC9zcmMvcm91dGVzL3VzZXJzL1t1c2VyXS5zdmVsdGUgLS0+XG48c2NyaXB0IGNvbnRleHQ9XCJtb2R1bGVcIj5cbiAgIGV4cG9ydCBhc3luYyBmdW5jdGlvbiBwcmVsb2FkKHsgcGFyYW1zLCBxdWVyeSB9KSB7XG4gICAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLmZldGNoKGBodHRwOi8vbG9jYWxob3N0OjM3MzcvY29udHJhY3RzL2FwZF92MDEvU3RhdGU/a2V5PSR7cGFyYW1zLnVzZXJ9YCkgLy8gdGhpcyBzaG91bGQgYmUgdGhlIG1hc3Rlcm5vZGVcbiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXMuanNvbigpO1xuICAgICAgaWYgKGRhdGEudmFsdWUgPT09ICd1bmRlZmluZWQnKSB0aGlzLmVycm9yKHJlcy5zdGF0dXMsIGRhdGEubWVzc2FnZSk7XG4gICAgICBpZiAoZGF0YS52YWx1ZSA9PT0gbnVsbCkgZGF0YS52YWx1ZSA9IDA7XG4gICAgICByZXR1cm4geyB2YWx1ZTogZGF0YS52YWx1ZSwgdXNlcjogcGFyYW1zLnVzZXIgfTtcbiAgIH1cblxuLy8gcHJvYmFibHkgd2FsbGV0Q29udHJvbGxlciBpbiB0aGUgaGVhZGVyXG48L3NjcmlwdD5cblxuPHNjcmlwdD5cbiAgICBpbXBvcnQgeyBnb3RvIH0gZnJvbSAnQHNhcHBlci9hcHAnO1xuXG4gICAgZXhwb3J0IGxldCB1c2VyO1xuICAgIGV4cG9ydCBsZXQgdmFsdWU7XG5cbiAgIGxldCByZWNlaXZlciA9IFwiXCI7XG4gICBsZXQgYW1vdW50ID0gMDtcblxuICAgY29uc3QgdHJhbnNmZXIgPSBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB0cmFuc2FjdGlvbiA9IHtcbiAgICAgICAgIHNlbmRlcjogdXNlcixcbiAgICAgICAgIGNvbnRyYWN0OiAnYXBkX3YwMScsXG4gICAgICAgICBtZXRob2Q6ICd0cmFuc2ZlcicsXG4gICAgICAgICBhcmdzOiB7XG4gICAgICAgICAgICByZWNlaXZlcixcbiAgICAgICAgICAgIGFtb3VudFxuICAgICAgICAgfVxuICAgICAgfVxuXG4gICBjb25zdCByZWZyZXNoQmFsYW5jZSA9IGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKFwiaHR0cDovL2xvY2FsaG9zdDozNzM3L2NvbnRyYWN0cy9hcGRfdjAxL1N0YXRlP2tleT1cIiArIHVzZXIpXG4gICAgICBsZXQgZGF0YSA9IGF3YWl0IHJlcy5qc29uKCk7XG4gICAgICB2YWx1ZSA9IGRhdGEudmFsdWU7XG4gICAgICB9XG5cbiAgIGNvbnN0IGNsZWFySW5wdXRzID0gKCkgPT4ge1xuICAgICAgcmVjZWl2ZXIgPSBcIlwiXG4gICAgICBhbW91bnQgPSAwXG4gICB9XG5cbiAgIGNvbnN0IGxvZ291dCA9ICgpID0+IHtcbiAgICAgIGdvdG8oYC5gKTtcbiAgIH1cblxuICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICAgfSxcbiAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHRyYW5zYWN0aW9uKVxuICAgICAgfVxuXG4gICAgICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaChgaHR0cDovL2xvY2FsaG9zdDozNzM3L2AsIG9wdGlvbnMpXG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzLmpzb24oKTtcbiAgICAgIGlmIChkYXRhLmVycm9yKSB7XG4gICAgICAgICBhbGVydChkYXRhLmVycm9yKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICBhbGVydChcIllvdSBzZW50IFwiICsgYW1vdW50ICsgXCIgdG9rZW4ocykgdG8gXCIgKyByZWNlaXZlciArIFwiIVwiKTtcbiAgICAgICAgIGNsZWFySW5wdXRzKCk7XG4gICAgICAgICByZWZyZXNoQmFsYW5jZSgpO1xuICAgICAgICAgICAgfVxuICAgfVxuPC9zY3JpcHQ+XG5cbjxzdHlsZT5cbiAgIHAgeyBmb250LXNpemU6IDEuMmVtOyB9XG4gICAuc2hhZG93Ym94IHsgcGFkZGluZzogMC41cmVtIDIwcHg7IH1cbiAgIGZvcm17XG4gICAgICBwYWRkaW5nOiA1MHB4O1xuICAgICAgY29sb3I6ICM0NjFCQzI7XG4gICAgICBkaXNwbGF5OmZsZXg7XG4gICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgYm9yZGVyOiBub25lO1xuICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgIH1cbiAgIGZvcm0gPiBoMntcbiAgICAgIG1hcmdpbjogMDtcbiAgICAgIGZvbnQtd2VpZ2h0OiA2MDA7XG4gICAgICBsaW5lLWhlaWdodDogMi4yO1xuICAgICAgbGV0dGVyLXNwYWNpbmc6IDFweDtcbiAgIH1cbiAgIGZvcm0gPiBpbnB1dHtcbiAgICAgIG1hcmdpbi1ib3R0b206IDFyZW07XG4gICB9XG4gICBpbnB1dFt0eXBlPVwic3VibWl0XCJdIHtcbiAgICAgIG1hcmdpbi1yaWdodDogMjBweDtcbiAgIH1cbiAgIC5idXR0b25zIHtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcbiAgICAgIG1hcmdpbi10b3A6IDFyZW07XG4gICB9XG48L3N0eWxlPlxuXG48c3ZlbHRlOmhlYWQ+XG4gICA8dGl0bGU+e3VzZXIgKyBcIidzIFRva2Vuc1wifTwvdGl0bGU+XG48L3N2ZWx0ZTpoZWFkPlxuXG48aDE+e1wiSGVsbG8gXCIgKyB1c2VyICsgXCIhXCJ9PC9oMT5cbjxoMj5Ub2tlbiBCYWxhbmNlOiB7dmFsdWV9PC9oMj5cblxuPGZvcm0gb246c3VibWl0fHByZXZlbnREZWZhdWx0PXt0cmFuc2Zlcn0+XG4gICA8aDM+TWFrZSBhIHRyYW5zZmVyPC9oMz5cbiAgIDxsYWJlbCBmb3I9XCJ0b1wiPlRvPC9sYWJlbD5cbiAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5hbWU9XCJ0b1wiIGJpbmQ6dmFsdWU9e3JlY2VpdmVyfSByZXF1aXJlZD1cInRydWVcIi8+XG4gICA8bGFiZWwgZm9yPVwiYW1vdW50XCI+VG9rZW4gQW1vdW50PC9sYWJlbD5cbiAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgbmFtZT1cImFtb3VudFwiIGJpbmQ6dmFsdWU9e2Ftb3VudH0gcmVxdWlyZWQ9XCJ0cnVlXCIvPlxuICAgPGRpdiBjbGFzcz1cImJ1dHRvbnNcIj5cbiAgICAgICAgPGlucHV0IGNsYXNzPVwiYnV0dG9uXCIgdHlwZT1cInN1Ym1pdFwiIHZhbHVlPVwic2VuZFwiLz5cbiAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ1dHRvblwiIG9uOmNsaWNrPXtsb2dvdXR9PnNpZ24gb3V0IDwvYnV0dG9uPlxuICAgPC9kaXY+XG48L2Zvcm0+XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O2dCQXVHSyxRQUFRLFlBQUcsR0FBSSxNQUFHLEdBQUc7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7eUNBSGYsR0FBSSxNQUFHLFdBQVc7Ozs7Ozs7Ozs7dUJBSVQsR0FBSzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7dUNBQUwsR0FBSzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3dDQUttQixHQUFROzs7Ozs7c0NBRUYsR0FBTTs7Ozs7Ozs7Ozs7O2lDQUdmLE1BQU07NkRBUmYsR0FBUTs7Ozs7OztxRUFON0IsR0FBSSxNQUFHLFdBQVc7Ozs7c0RBR3hCLFFBQVEsWUFBRyxHQUFJLE1BQUcsR0FBRzt1REFDTixHQUFLOzsrREFLbUIsR0FBUTt5Q0FBUixHQUFROzs7c0VBRUYsR0FBTTt1Q0FBTixHQUFNOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2VBN0cvQixPQUFPLEdBQUcsTUFBTSxFQUFFLEtBQUs7T0FDcEMsR0FBRyxTQUFTLElBQUksQ0FBQyxLQUFLLHNEQUFzRCxNQUFNLENBQUMsSUFBSTtPQUN2RixJQUFJLFNBQVMsR0FBRyxDQUFDLElBQUk7S0FDdkIsSUFBSSxDQUFDLEtBQUssS0FBSyxXQUFXLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxPQUFPO0tBQy9ELElBQUksQ0FBQyxLQUFLLEtBQUssSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQztVQUM5QixLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUk7Ozs7OztPQVNwQyxJQUFJO09BQ0osS0FBSztLQUViLFFBQVEsR0FBRyxFQUFFO0tBQ2IsTUFBTSxHQUFHLENBQUM7O09BRVIsUUFBUTtRQUNMLFdBQVc7R0FDZCxNQUFNLEVBQUUsSUFBSTtHQUNaLFFBQVEsRUFBRSxTQUFTO0dBQ25CLE1BQU0sRUFBRSxVQUFVO0dBQ2xCLElBQUksSUFDRCxRQUFRLEVBQ1IsTUFBTTs7O1FBSVQsY0FBYztTQUNYLEdBQUcsU0FBUyxLQUFLLENBQUMsb0RBQW9ELEdBQUcsSUFBSTtPQUMvRSxJQUFJLFNBQVMsR0FBRyxDQUFDLElBQUk7bUJBQ3pCLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSzs7O1FBR2YsV0FBVzttQkFDZCxRQUFRLEdBQUcsRUFBRTttQkFDYixNQUFNLEdBQUcsQ0FBQzs7O1FBT0osT0FBTztHQUNWLE1BQU0sRUFBRSxNQUFNO0dBQ2QsT0FBTyxJQUNKLGNBQWMsRUFBRSxrQkFBa0I7R0FFckMsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVzs7O1FBRzdCLEdBQUcsU0FBUyxLQUFLLDJCQUEyQixPQUFPO1FBQ25ELElBQUksU0FBUyxHQUFHLENBQUMsSUFBSTs7TUFDdkIsSUFBSSxDQUFDLEtBQUs7R0FDWCxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUs7O0dBRWhCLEtBQUssQ0FBQyxXQUFXLEdBQUcsTUFBTSxHQUFHLGVBQWUsR0FBRyxRQUFRLEdBQUcsR0FBRztHQUM3RCxXQUFXO0dBQ1gsY0FBYzs7Ozs7Ozs7Ozs7RUE4Q3FCLFFBQVE7Ozs7O0VBRUYsTUFBTTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==
